{"version":3,"sources":["assets/LocoLogo.svg","assets/gameIcons/fuckthedealer.svg","assets/gameIcons/hetspong.svg","assets/gameIcons/jagharaldrig.svg","assets/gameIcons/pekleken.svg","assets/gameIcons/ringoffire.svg","assets/gameIcons/overunder.svg","assets/gameIcons/bussen.svg","assets/back.svg","utils.js","Games.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","getGames","iconSrc","require","id","title","texts","react_default","a","createElement","Games","renderElements","map","game","i","toggleShowGame","_this","props","key","className","onClick","src","alt","this","Component","Game","renderText","textObj","lib","showThumbs","transitionTime","showStatus","App","state","showGame","setState","prevState","_this$state","Game_Game","locoLogo","Games_Games","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.661d6b9c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/LocoLogo.fa6ee1e6.svg\";","module.exports = __webpack_public_path__ + \"static/media/fuckthedealer.23e111a1.svg\";","module.exports = __webpack_public_path__ + \"static/media/hetspong.cfc7f141.svg\";","module.exports = __webpack_public_path__ + \"static/media/jagharaldrig.705281b9.svg\";","module.exports = __webpack_public_path__ + \"static/media/pekleken.d0ef1179.svg\";","module.exports = __webpack_public_path__ + \"static/media/ringoffire.475f7c49.svg\";","module.exports = __webpack_public_path__ + \"static/media/overunder.26027a56.svg\";","module.exports = __webpack_public_path__ + \"static/media/bussen.05a9d942.svg\";","module.exports = __webpack_public_path__ + \"static/media/back.4618dcf5.svg\";","import React from 'react'\n\nexport const getGames = () => {\n  const fuckTheDealer = {\n    iconSrc: require('./assets/gameIcons/fuckthedealer.svg'),\n    id: 'fuckTheDealer',\n    title: 'F**K THE DEALER',\n    texts: [\n      (\n        <div>\n          <h1>F**K THE DEALER</h1>\n          <br/>\n          <p>\n            En spelare är ansvarig för kortleken och kallas dealer. Dealern ber spelaren till höger gissa ett värde på översta kortet. Spelaren har två försök att gissa rätt. Om spelaren gissar rätt eller misslyckas på sista försöket läggs kortet på bordet med värdet synligt. Kort med samma värde placeras på varandra.\n            Korten på bordet bör ligga i storleksordning.\n          </p>\n        </div>\n      ),\n      (\n        <p>\n          Gissar spelaren rätt måste dealern dricka sex klunkar annars berättar dealern om den faktiska kortet är högre eller lägre än gissningen och spelaren får en ny gissning. Gissar spelaren rätt på andra försöket får dealern dricka tre klunkar.\n          Gissar spelaren fel på andra försöket får spelaren dricka mellanskillnaden mellan kortet och gissningen.\n        </p>\n      ),\n      (\n        <p>\n          Dealern skickar vidare kortleken till den vänstra spelaren om dealern klarat sig från att dricka efter 3 omgångar.\n          Spelet är slut när hela kortleken ligger på bordet. Den sista dealern förlorar.\n        </p>\n      ),\n    ]\n  }\n\n  const hetspong = {\n    iconSrc: require('./assets/gameIcons/hetspong.svg'),\n    id: 'hetspong',\n    title: 'HETSPONG',\n    texts: [\n      (\n        <div>\n          <h1>HETSPONG</h1>\n          <br/>\n          <p>\n            Minst 12 muggar ställs i mitten av bordet i par på en linje. Fyll alla muggar med lämplig mängd av valfri dryck. Alla spelare placerar sig runt bordet.\n            Två spelare som står långt bort ifrån varandra runt bordet börjar med varsin pingisboll och varsin tom mugg. Spelet går ut på att pricka den tomma muggen genom att studsa pingisbollen i bordet.\n          </p>\n        </div>\n      ),\n      (\n        <p>\n          Prickar pingisbollen den tomma muggen på första försöket får spelaren skicka vidare muggen och pingisbollen till valfri spelare.\n          Annars skickas muggen och pingisbollen vidare till den högra spelaren.\n        </p>\n      ),\n      (\n        <p>\n          När en mugg hinner ikapp den andra muggen staplas dem i varandra. De staplade muggarna skickas vidare med en pingisboll till nästa högra spelare som fortsätter spelet. Spelaren vars mugg blev staplad i tar en ny mugg med dryck, tömmer muggen och fortsätter spelet.\n        </p>\n      ),\n      (\n        <p>\n          Om pingisbollen prickar en mugg med dryck måste spelaren tömma muggen innan spelaren fortsätter. Stapla sedan de muggarna i varandra och fortsätt spelet.\n          Spelet pågår tills alla muggar med dryck är tömda. Spelaren som måste dricka sista muggen med dryck förklaras till förlorare.\n        </p>\n      ),\n    ]\n  }\n\n  const jagharaldrig = {\n    iconSrc: require('./assets/gameIcons/jagharaldrig.svg'),\n    id: 'jagharaldrig',\n    title: 'JAG HAR ALDRIG',\n    texts: [\n      (\n        <div>\n          <h1>JAG HAR ALDRIG</h1>\n          <br/>\n          <p>\n          En spelar i taget säger: ” Jag har aldrig…” följt av ett påstående.\n          Varje person dricker om de HAR gjort det.\n          Om man inte har gjort påståendet men man VILL göra det ställer man koppen på huvudet. \n          </p>\n        </div>\n      ),\n      (\n        <p>\n         Story Time\n         Om endast en person dricker bör spelaren berätta historien om hur påståendet blev sant.\n        </p>\n      ),\n    ]\n  }\n\n  const pekleken = {\n    iconSrc: require('./assets/gameIcons/pekleken.svg'),\n    id: 'pekleken',\n    title: 'PEKLEKEN',\n    texts: [\n      (\n        <div>\n          <h1>PEKLEKEN</h1>\n          <br/>\n          <p>\n          En spelare säger ett påstående som börjar med ”Vem i rummet…” och räknar till 3.\n          På tre pekar alla spelare i rummet på den spelaren påståendet passar bäst in på.\n          Alla dricker så många pekningar de får.\n          </p>\n        </div>\n      ),\n      (\n        <p>\n          Story time: Om alla pekar på samma person bör den spelaren berätta historien om påståendet. \n        </p>\n      ),\n    ]\n  }\n\n  const ringoffire = {\n    iconSrc: require('./assets/gameIcons/ringoffire.svg'),\n    id: 'ringoffire',\n    title: 'RING OF FIRE',\n    texts: [\n      (\n        <div>\n          <h1>RING OF FIRE</h1>\n          <br/>\n          <p>\n          Ställ en mugg i mitten, denna kallas kungen. Placera alla korten från en kortlek runt kungen i en sluten cirkel. Varje spelare häller en skvätt av sin dryck i muggen. Spelaren som börjar drar ett kort från cirkeln. Spelaren läser upp och utför regeln för kortet. \n          Om en spelare bryter cirkeln dricker spelaren kungen.\n          </p>\n        </div>\n      ),\n      (\n        <p>\n        2-6 röda kort\n        Spelaren delar ut lika många klunkar som kortet visar.\n        \n        2-6 svarta kort\n        Spelaren dricker lika många klunkar som kortet visar.\n        </p>\n      ),\n      (\n        <p>\n        7 Kissekort\n        Kortet sparas. Spelaren får när som helst använda kortet genom att gå på toa. \n        Spelaren får också ”sälja ” kortet till andra spelare.\n\n        8 tumregeln\n        Kortet sparas. Spelaren får närsomhelst sätta tummen på bordet. Alla spelare tävlar nu om att sätta tummen på pannan. Den som kommer sist dricker.\n        </p>\n      ),\n      (\n        <p>\n        9 Tema \n        Spelaren som drog kortet bestämmer tema. \n        Varje spelare ska jag tur och ordning säga något som passar in på temat och som inte har sagts tidigare. Spelaren som misslyckas dricker, och det vanliga spelet fortsätter.\n\n        10 ny regel\n        Spelaren får bestämma en ny regel som gäller resten av spelet.\n        </p>\n      ),\n      (\n        <p>\n        Kn\n        Alla killar dricker.\n\n        D skål\n        Alla tjejer dricker.\n\n        K \n        Spelaren dricker upp muggen i mitten av ringen. Alla fyller muggen igen.\n\n        A- vattenfall\n        Alla börja dricka och man får sluta dricka när personen innan slutar. \n        Spelaren som drog kortet får själv bestämma hur länge spelaren ska dricka. \n        </p>\n      ),\n    ]\n  }\n\n  const overunder = {\n    iconSrc: require('./assets/gameIcons/overunder.svg'),\n    id: 'overunder',\n    title: 'ÖVER/UNDER',\n    texts: [\n      (\n        <div>\n          <h1>ÖVER/UNDER</h1>\n          <br/>\n          <p>\n            En spelare ansvarar för kortleken och kallas dealer. Dealern ber spelaren till höger gissa värdet \n            på översta kortet. Dealern tittar på kortet, om värdet är korrekt får dealern dricka 6 klunkar. Om \n            värdet på kortet är högre/lägre får spelaren gissa på ett kort som är högre/lägre. Gissar spelaren fel \n            igen får den dricka mellanskillnaden mellan det översta kortet och det sista kortet spelaren gissade på. \n            Om spelaren gissar rätt på andra försöket får dealern dricka 3 klunkar. Spelet fortsätter moturs. Om \n            dealern klarar sig från att dricka efter 3 omgångar skickas kortleken medurs.\n          </p>\n        </div>\n      ),\n    ]\n  }\n\n  const bussen = {\n    iconSrc: require('./assets/gameIcons/bussen.svg'),\n    id: 'bussen',\n    title: 'BUSSEN',\n    texts: [\n      (\n        <div>\n          <h1>BUSSEN</h1>\n          <br/>\n          <p>\n           Placera ut 9 kort, nedåtvända på ett bord så att de skapar en 3×3-formation. Fördela resten av korten jämt \n           bland spelarna. Överblivna kort läggs åt sidan.\n          </p>\n        </div>\n        ),\n        (\n          <p>\n            En åt gången vänder dealern upp ett kort. Om en spelare har ett kort på hand som matchar ett kort \n            som vänds upp, placerar de det kortet ovanpå detta. För varje kort de placerar får de nominera en spelare \n            som får dricka två klunkar. Fortsätt tills alla korten på bordet har vänts upp.\n          </p>\n        ),\n        (\n        <p>\n          Dealern blandar sedan alla korten som lagts på bordet och lägger återigen upp 9 stycken nedåtvända kort på \n          bordet så att de bildar en diamant (1 – 2 – 3 – 2 – 1).\n          Nu ska alla spelare som fortfarande har kort på handen ”åka bussen”. Alla spelare som åker bussen spelar nu tillsammans. \n          Målet är nu att vända ett kort i änden av diamanten, och sedan vända det intilliggande kortet för att ta sig till \n          andra sidan av diamanten.\n          </p>\n        ),\n        (\n        <p>\n          Om ett klätt kort (Knekt, Hjärter eller Kung) eller ett Ess vänds upp måste alla spelare som åker buss dricka tre klunkar. \n          Spelet är slut när spelarna lyckats ta sig från ena sidan, till den andra av diamanten utan att vända upp ett klätt kort eller \n          Ess. Då blandas kortleken och spelet börjar om från början.\n        </p>\n      ),\n    ]\n  }\n\n  const content = [\n    fuckTheDealer,\n    hetspong,\n    jagharaldrig,\n    pekleken,\n    ringoffire,\n    overunder,\n    bussen,\n  ]\n\n  return content\n}\n","import React, { Component } from 'react'\nimport { getGames } from './utils'\n\nexport default class Games extends Component {\n   renderElements = () => {\n      let elementsToRender = getGames().map((game, i) => {\n         const { iconSrc, title, id } = game\n         const { toggleShowGame } = this.props\n\n         return (\n            <div key={i} className='grid-item' onClick={() => toggleShowGame(game)}>\n               <img id={id} src={iconSrc} alt='img' />\n               <p>{title}</p>\n            </div>\n         )\n      })\n\n      return elementsToRender\n   }\n\n   render() {\n      return (\n         <div id=\"grid-container\">\n            {this.renderElements()}\n         </div>\n      )\n   }\n}","import React, { Component } from 'react'\nimport { Carousel } from 'react-responsive-carousel'\nimport 'react-responsive-carousel/lib/styles/carousel.min.css'\n\nexport default class Game extends Component {\n  renderText = () => {\n    const { game } = this.props\n    const { texts } = game\n\n    let textToRender = texts.map((textObj, i) => {\n      return (\n        <div key={i} className='slideContainer'>\n          <div className='slides'>\n            {textObj}\n          </div>\n        </div>\n      )\n    })\n\n    return textToRender\n  }\n\n  render() {\n    const { toggleShowGame } = this.props\n    \n    return (\n      <div>\n      <div id='button' onClick={() => toggleShowGame()}>\n        <img src={require('./assets/back.svg')} alt='back' />\n        <p>Tillbaka</p>\n      </div>\n\n        <Carousel showThumbs={false} transitionTime={200} showStatus={false}>\n          {this.renderText()}\n        </Carousel>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react'\nimport './styles/app.scss'\nimport Games from './Games'\nimport Game from './Game'\nimport locoLogo from './assets/LocoLogo.svg'\n\nclass App extends Component {\n  state = {\n    showGame: false,\n    game: {}\n  }\n\n  toggleShowGame = game => {\n    this.setState(prevState => ({\n      showGame: !prevState.showGame,\n      game\n    }))\n  }\n\n  render() {\n    const { showGame, game } = this.state\n\n    return (\n      <div>\n        {\n          showGame ?\n          <Game game={game} toggleShowGame={this.toggleShowGame}/> \n          :\n          <div id='appContainer'>\n            <img id='logo' src={locoLogo} alt=\"Logo\" />\n            <Games toggleShowGame={this.toggleShowGame} />\n          </div>\n        }\n      </div>\n    )\n  }\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}